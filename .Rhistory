ablineclip(v=7, lty=0,col="sienna2", lwd=2)
ablineclip(v=7, lty=0,col="sienna2", lwd=2)
ablineclip(v=6, lty=6,col="sienna2", lwd=5)
plot(lynx)
plot(lynx,type="p",main="Type p")
plot(lynx,type="l",main="Type l")
plot(lynx,type="b",main="Type b")
plot(lynx,type="c",main="Type c")
plot(lynx,type="o",main="Type o")
plot(lynx,type="h",main="Type h")
plot(lynx,type="s",main="Type s")
plot(lynx,type="n",main="Type n")
par(mar=c(4,3,3,3), color.axis="darkgreen")
par(mar=c(4,3,3,3), col.axis="darkgreen")
par(mar=c(4,3,3,3), col.axis="darkgreen")
plot(cars$speed, type="s", bty="n", xlab="Cars ID", ylab = "")
text(8,14,"Speed in mph", cex=0.85, col = "red")
text(10,14,"Speed in mph", cex=0.85, col = "red")
plot(new=T)
par(new=T)
plot(cars$dist, type="s", bty="n", ann=F, axes=F, col="darkblue")
axis(side=4,col="darkblue")
text(37,18,"Stopping distane in ft",cex=0.85, col="darkblue")
par()
plot(lynx)
plot(lynx,type="p",main="Type p")
plot(lynx,type="l",main="Type l")
plot(lynx,type="b",main="Type b")
plot(lynx,type="c",main="Type c")
plot(lynx,type="o",main="Type o")
plot(lynx,type="h",main="Type h")
plot(lynx,type="s",main="Type s")
plot(lynx,type="n",main="Type n")
plot(x,y)
hist(lynx)
plot(lynx)
?plot
?plot
plot(lynx, main="Title", color = "red", color.main = 52)
plot(lynx, main="Title", col = "red", color.main = 52)
plot(lynx, main="Title", col = "red", color.main = 52)
plot(lynx, main="Title", col = "red", col.main = 52)
plot(lynx, main="Title", col = "red", col.main = 52)
plot(x,y)
plot(lynx, main="Title", col = "red", col.main = 52)
plot(lynx, main="Title", color = "red", col.main = 52)
plot(lynx, main="Title", col = "red", col.main = 52)
plot(lynx, main="Title", col = "red", col.main = 52)
plot(lynx, main="Title", col = "red", col.main = 52, cex.main = 1.5)
plot(lynx, main="Title", col = "red", col.main = 52, cex.main = 3)
plot(lynx, main="Lynx", xlab="Year", ylab="Time", col="red", col.main = 52)
plot(lynx, ylab="Lynx trapping", xlab="",las=2)
plot(lynx, ylab="Lynx trapping", xlab="",las=1)
plot(lynx, ylab="Lynx trapping", xlab="",las=3)
plot(lynx, ylab="Lynx trapping", xlab="",las=0)
plot(lynx, ylab="Lynx trapping", xlab="",las=1)
plot(lynx, ylab="Lynx trapping", xlab="",las=2)
plot(lynx, ylab="Lynx trapping", xlab="",las=2)3par(mfrow=c(2,2), col.axis="red")
plot(lynx, ylab="Lynx trapping", xlab="",las=3)
plot(lynx, mian="Lynx",xlab="Year",ylab = "Time", col = "red", col.main = 52, las = 0)
plot(lynx, mian="Lynx",xlab="Year",ylab = "Time", col = "red", col.main = 52, cex.main = 1, las = 0)
plot(lynx, mian="Lynx",xlab="Year",ylab = "Time", col="red", col.main = 52, cex.main = 1)
plot(lynx, main="Lynx",xlab="Year",ylab = "Time", col="red", col.main = 52, cex.main = 1)
plot(lynx, main="Lynx",xlab="Year",ylab = "Time", col="red", col.main = 52, cex.main = 1)
plot(lynx, main="Lynx",xlab="Year",ylab = "Time", col="red", col.main = 52, cex.main = 1, las = 0)
plot(lynx, main="Lynx",xlab="Year",ylab = "Time", col="red", col.main = 52, cex.main = 1, las = 1)
0
plot(lynx, main="Lynx",xlab="Year",ylab = "Time", col="red", col.main = 52, cex.main = 1, las = 0)
plot(lynx, main="Lynx",xlab="Year",ylab = "Time", col="red", col.main = 52, cex.main = 1, las = 7)
plot(lynx, main="Lynx",xlab="Year",ylab = "Time", col="red", col.main = 52, cex.main = 1, las = 3)
?par
par(mfrow = c(2,2), col.axis = "red")
plot(1:8, las=0, xlab="xlab", y="ylab", main = "LAS = 0")
plot(1:8, las=0, xlab="xlab", y="ylab", main = "LAS = 0")
plot(1:8, las=0, xlab="xlab",ylab="ylab", main = "LAS = 0")
par(mfrow = c(0,0), col.axis = "red")
plot(1:8, las=0, xlab="xlab",ylab="ylab", main = "LAS = 0")
par(mfrow = c(0,0), col.axis = "red")
plot(1:8, las=0, xlab="xlab",ylab="ylab", main = "LAS = 0")
par(mfrow = c(0,0), col.axis = "red")
plot(1:8, las=0, xlab="xlab",ylab="ylab", main = "LAS = 0")
par(mfrow = c(4,4), col.axis = "red")
plot(1:8, las=0, xlab="xlab",ylab="ylab", main = "LAS = 0")
par(mfrow = c(4,4), col.axis = "red")
plot(1:8, las=0, xlab="xlab",ylab="ylab", main = "LAS = 0")
plot(1:8, las=0, xlab="xlab",ylab="ylab", main = "LAS = 0")
plot(1:8, las=0, xlab="xlab",ylab="ylab", main = "LAS = 0")
plot(1:8, las=0, xlab="xlab",ylab="ylab", main = "LAS = 0")
plot(1:8, las=0, xlab="xlab",ylab="ylab", main = "LAS = 0")
plot(1:8, las=0, xlab="xlab",ylab="ylab", main = "LAS = 0")
plot(1:8, las=0, xlab="xlab",ylab="ylab", main = "LAS = 0")
plot(1:8, las=0, xlab="xlab",ylab="ylab", main = "LAS = 0")
plot(1:8, las=0, xlab="xlab",ylab="ylab", main = "LAS = 0")
par(mfrow = c(2,2), col.axis = "red")
plot(1:8, las=0, xlab="xlab",ylab="ylab", main = "LAS = 0")
par(mfrow = c(2,2), col.axis = "red")
par(mfrow = c(2,2), col.axis = "red")
plot(1:8, las=0, xlab="xlab",ylab="ylab", main = "LAS = 0")
plot(1:8, las=1, xlab="xlab",ylab="ylab", main = "LAS = 1")
plot(1:8, las=2, xlab="xlab",ylab="ylab", main = "LAS = 2")
plot(1:8, las=3, xlab="xlab",ylab="ylab", main = "LAS = 3")
colors()
?pch
require(stats) # for rnorm
plot(-4:4, -4:4, type = "n")  # setting up coord. system
points(rnorm(200), rnorm(200), col = "red")
points(rnorm(100)/2, rnorm(100)/2, col = "blue", cex = 1.5)
x = 2:4
plot(x, pch=13)
plot(x, pch=25)
plot(x, pch=27)
plot(x, pch='C')
plot(x, pch='A')
par(mfrow = c(1,1), color.axis('red'))
par(mfrow = c(1,1), color.axis('red'))
par(mfrow = c(1,1), color.axis(21))
par(mfrow = c(1,1), color.axis("red"))
par(mfrow = c(1,1), color.axis="red")
par(mfrow = c(1,1), col.axis="red")
par(mfrow = c(1,1), col.axis="red")
plot(1:7, ylab="",main="Lines", bg = "green")
par(mfrow = c(1,1), col.axis="red")
plot(1:7, ylab="",main="Lines", bg = "green")
plot(1:7, ylab="",main="Lines", bg = "blue")
plot(1:70, ylab="",main="Lines", bg = "blue")
par(mfrow = c(1,1), col.axis="black")
plot(1:70, ylab="",main="Lines")
par(mfrow = c(1,1), col.axis="black", bg = "red")
plot(1:70, ylab="",main="Lines")
par(mfrow = c(1,1), col.axis="black", bg = "white")
plot(1:70, ylab="",main="Lines")
par(mfrow = c(1,1), col.axis="black", bg = "blue")
plot(1:70, ylab="",main="Lines")
par(mfrow = c(1,1), col.axis="black")
plot(1:70, ylab="",main="Lines")
par(mfrow = c(1,1), col.axis="black")
plot(1:70, ylab="",main="Lines")
par(mfrow = c(1,1), col.axis="black")
plot(1:70, ylab="",main="Lines")
par(mfrow = c(1,1), col.axis="black", bg = "white")
plot(1:70, ylab="",main="Lines")
par(mfrow = c(1,1), col.axis="black", bg = "white")
x = 2:4
plot(1:7, ylab = "",main = "Lines", xlab="Lty 0:6")
ablineclip(v=1, lty=1, col = "sienna2", lwd=2)
ablineclip(v=2, lty=2, col = "sienna2", lwd=2)
ablineclip(v=3, lty=3, col = "sienna2", lwd=2)
ablineclip(v=4, lty=4, col = "sienna2", lwd=2)
ablineclip(v=5, lty=5, col = "sienna2", lwd=2)
ablineclip(v=6, lty=6, col = "sienna2", lwd=5)
ablineclip(v=7, lty=0, col = "sienna2", lwd=2)
par(mfrow = c(1,1), col.axis = "red")
plot(lynx,type="p",main="Type p")
plot(lynx,type="l",main="Type l")
plot(lynx,type="b",main="Type b")
plot(lynx,type="c",main="Type c")
plot(lynx,type="o",main="Type o")
plot(lynx,type="h",main="Type h")
plot(lynx,type="s",main="Type s")
plot(lynx,type="n",main="Type n")
?plot
par(mar=c(4,3,3,3), col.axis="darkgreen")
plot(cars$speed, type="s", bty="n", xlab="Cars ID", ylab = "")
text(10,14,"Speed in mph", cex=0.85, col = "red")
par(new=T)
plot(cars$dist, type="s", bty="n", ann=F, axes=F, col="darkblue")
axis(side=4,col="darkblue")
axis(side=2,col="darkblue")
plot(cars$speed, type="s", bty="n", xlab="Cars ID", ylab = "")
text(10,14,"Speed in mph", cex=0.85, col = "red")
par(new=T)
plot(cars$dist, type="s", bty="n", ann=F, axes=F, col="darkblue")
axis(side=2,col="darkblue")
text(37,18,"Stopping distane in ft",cex=0.85, col="darkblue")
par()
plot(cars$speed, type="s", bty="n", xlab="Cars ID", ylab = "")
text(10,14,"Speed in mph", cex=0.85, col = "red")
par(new=T)
plot(cars$dist, type="s", bty="n", ann=F, axes=F, col="darkblue")
axis(side=2,col="darkblue")
text(37,18,"Stopping distane in ft",cex=0.85, col="darkblue")
par()
?plot
help.strt(plot())
help.start(plot())
help.start(plot)
help.start('plot')
help.plot
help.start
help.start()
rivers
plot(rivers)
plot(rivers, main = "Length of Major N American rivers")
plot(rivers, main = "Length of Major N American rivers", main.col = 'red')
plot(rivers, main = "Length of Major N American rivers", col.main = 52)
plot(rivers, main = "Length of Major N American rivers", col.main = 'red')
plot(rivers, main = "Length of Major N American rivers", col.main = 'blue')
par(mfrow = c(1,1), col.axis = "black")
plot(rivers, main = "Length of Major N American rivers", col.main = 'blue')
plot(rivers, main = "Length of Major N American rivers", col.main = 'blue', xlab = "", ylab = "length in miles")
plot(rivers, main = "Length of Major N American rivers", col.main = 'blue', xlab = "", ylab = "length in miles")
plot(rivers, main = "Length of Major N American rivers", col.main = 'blue', xlab = "", ylab = "length")
plot(rivers, main = "Length of Major N American rivers", col.main = 'blue', xlab = "", ylab = "length in miles", las = 0)
plot(rivers, main = "Length of Major N American rivers", col.main = 'blue', xlab = "", ylab = "length in miles", las = 1)
plot(rivers, main = "Length of Major N American rivers", col.main = 'blue', xlab = "", ylab = "length in miles")
plot(rivers, main = "Length of Major N American rivers", col.main = 'blue', xlab = "", ylab = "length in miles", las = 1)
plot(rivers, main = "Length of Major N American rivers", col.main = 'blue', xlab = "", ylab = "length in miles", las = 0)
?rivers
plot(1:141, rivers)
plot(1:141, rivers, col('green'))
plot(1:141, rivers, col = "green")
plot(1:141, rivers, col = "green", main = "Length of rivers", col.main = "blue")
library(readr)
study_fields <- read_csv("C:/Users/Hammad Ali Khan/Desktop/R/study_fields.csv")
View(study_fields)
?apply
x - matrix(c(1:9), nr-3, byrow = T)
x - matrix(c(1:9), nr-3, byrow = T)
x <- matrix(c(1:9), nr-3, byrow = T)
X - matrix(c(1:9), nr- 3, byrow = T)
X - matrix(c(1:9), nr- 3, byrow - T)
X = matrix(c(1:9), nr= 3, byrow = T)
x
X
apply(X,1,mean)
apply(x,2,mean)
apply(X,2,mean)
apply(x,1,plot)
apply(x,1,plot)
apply(x,1,plot)
apply(X,1,plot)
detach("package:plotrix", unload=TRUE)
install.packages("ggplot2")
library("ggplot2", lib.loc="~/R/win-library/3.3")
Dataset = diamonda
Dataset = diamonds
?diamonds
diamonds
library("ggplot2", lib.loc="~/R/win-library/3.3")
detach("package:ggplot2", unload=TRUE)
library("ggplot2", lib.loc="~/R/win-library/3.3")
detach("package:ggplot2", unload=TRUE)
library("ggplot2", lib.loc="~/R/win-library/3.3")
install.packages("ggplot2")
library("ggplot2", lib.loc="~/R/win-library/3.3")
detach("package:ggplot2", unload=TRUE)
library("ggplot2", lib.loc="~/R/win-library/3.3")
detach("package:ggplot2", unload=TRUE)
library(ggplot2)
library(ggplot2)
??diamonds
diamonds
remove.packages(c("ggplot2", "data.table"))
install.packages('Rcpp', dependencies = TRUE)
install.packages('ggplot2', dependencies = TRUE)
install.packages('data.table', dependencies = TRUE)
remove.packages(c("ggplot2", "data.table"))
install.packages('Rcpp', dependencies = TRUE)
install.packages('ggplot2', dependencies = TRUE)
install.packages('data.table', dependencies = TRUE)
install.packages("Rcpp", dependencies = TRUE)
library("ggplot2", lib.loc="~/R/win-library/3.3")
detach("package:ggplot2", unload=TRUE)
library("ggplot2", lib.loc="~/R/win-library/3.3")
remove.packages(c("ggplot2", "data.table"))
install.packages('Rcpp', dependencies = TRUE)
install.packages("Rcpp", dependencies = TRUE)
install.packages('ggplot2', dependencies = TRUE)
install.packages('data.table', dependencies = TRUE)
library("ggplot2", lib.loc="~/R/win-library/3.3")
detach("package:ggplot2", unload=TRUE)
library("gdtools", lib.loc="~/R/win-library/3.3")
library("ggplot2", lib.loc="~/R/win-library/3.3")
detach("package:ggplot2", unload=TRUE)
library("ggplot2", lib.loc="~/R/win-library/3.3")
install.packages(colorspace)
install.packages('colorspace')
library("ggplot2", lib.loc="~/R/win-library/3.3")
diamonds
summary(diamonds)
dataSet = diamonds
plot(dataSet$depth)
head(diamonds)
attach(diamonds)
qqnorm(depth)
hist(diamonds)
hist(depth)
depthSmall = sample(depth, 5000)
shapiro.test(depthSmall)
install.packages('nortest')
library("nortest", lib.loc="~/R/win-library/3.3")
cvm.test(depth)
lillie.test(depth)
sf.test(depth)
sf.test(depthSmall)
pearson.test(depth)
diamonds
?histrogram
??histrogram
library("ggplot2", lib.loc="~/R/win-library/3.3")
install.packages("lattice")
library("lattice", lib.loc="~/R/win-library/3.3")
library("lattice", lib.loc="C:/Program Files/R/R-3.3.3/library")
detach("package:lattice", unload=TRUE)
library("lattice", lib.loc="~/R/win-library/3.3")
iris
?histogram
histogram( ~ height | voice.part, data = singer, nint = 17,
endpoints = c(59.5, 76.5), layout = c(2,4), aspect = 1,
xlab = "Height (inches)")
histogram( ~ height | voice.part, data = singer, nint = 17,
endpoints = c(59.5, 76.5), layout = c(2,4), aspect = 1,
xlab = "Height (inches)")
histogram( ~ height | voice.part, data = singer, nint = 17,
endpoints = c(59.5, 76.5), layout = c(2,4), aspect = 4,
xlab = "Height (inches)")
histogram( ~ height | voice.part, data = singer, nint = 17,
endpoints = c(59.5, 76.5), layout = c(2,4), aspect = 0.5,
xlab = "Height (inches)")
histogram( ~ height | voice.part, data = singer, nint = 17,
endpoints = c(59.5, 76.5), layout = c(2,4), aspect = 0.1,
xlab = "Height (inches)")
histogram( ~ height | voice.part, data = singer, nint = 17,
endpoints = c(59.5, 76.5), layout = c(2,4), aspect = 0.3,
xlab = "Height (inches)")
histogram( ~ height | voice.part, data = singer, nint = 17,
endpoints = c(59.5, 76.5), layout = c(1,4), aspect = 0.3,
xlab = "Height (inches)")
histogram( ~ height | voice.part, data = singer, nint = 17,
endpoints = c(59.5, 76.5), layout = c(4,4), aspect = 0.3,
xlab = "Height (inches)")
histogram( ~ height | voice.part, data = singer, nint = 17,
endpoints = c(59.5, 76.5), layout = c(2,4), aspect = 0.3,
xlab = "Height (inches)")
histogram( ~ height | voice.part, data = singer, nint = 10,
endpoints = c(59.5, 76.5), layout = c(2,4), aspect = 0.3,
xlab = "Height (inches)")
histogram( ~ height | voice.part, data = singer, nint = 4,
endpoints = c(59.5, 76.5), layout = c(2,4), aspect = 0.3,
xlab = "Height (inches)")
install.packages('swirl')
swirl()
library(swirl)
install_course('Getting and Cleaning Data')
install_course('Getting and Cleaning Data')
install_course('Getting and Cleaning Data')
library(swirl)
install_course('Getting and Cleaning Data')
swirl()
mydf <- read.csv(path2csv, stringsAsFactors = F)
mydf <- read.csv(path2csv, stringsAsFactors = FALSE)
dim(mydf)
head(mydf)
library(dplyr)
packageVersion("dplyr")
cran <- tbl_df(mydf)
rm("mydf")
?tbl_df
tbl_df
cran
>select()
?select
select(cran, ip_id, package, country)
5:20
select(cran , r_arch:country)
select(cran, country:r_arch)
cran
select(cran, -time)
-5:20
-(5:20)
select(cran, -(X:size))
filter(cran, package == "swirl")
filter(cran, r_version == "3.1.1", country == "US")
?Comparison
filter(cran, r_version <= "3.0.2", country == "US")
filter(cran, r_version <= "3.0.2", country == "IN")
filter(cran, country == "US" | country == "IN")
filter(cran, size > 100500, r_os == "linux-gnu")
is.na()c(3,5,NA,10)
is.na(c(3,5,NA,10))
!is.na(c(3,5,NA,10))
R.version
r_version
filter(cran, !is.na(r_version))
cran2 <- select(cran, size:ip_id)
arrange(cran2, asc(ip_id)
)
arrange(cran2, asc(ip_id))
arrange(cran2, ip_id)
arrange(cran2, desc(ip_id)
arrange(cran2, desc(ip_id))
arrange(cran2, desc(ip_id))
arrange(cran2, package, ip_id)
arrange(cran2, ip_id)
arrange(cran2, country, desc(r_version), ip_id)
cran3 <- select(cran, ip_id,package, size)
cran3
mutate(cran3, size_mb = size / 2^20)
mutate(cran3, size_mb = size / 2^20, size_gb = size_mb / 2^10)
mutate(cran3, correct_size = size + 1000)
summarize(cran, avg_bytes = mean(size))
libray(dplyr)
library(dplyr)
cran <- tbl_df(mydf)
rm("mydf")
cran
?group_by
by_package <- group_by(cran, package)
by_package
summarize(by_package, mean(size))
submit()
pack_sum
quantile(pack_sum$count, probs = 0.99)
top_counts <- filter(pack_sum, count > 679)
top_counts
View(top_counts)
top_counts_sorted <- arrange(top_counts, desc(count)
)
View(top_counts_sorted)
quantile(pack_sum$unique, probs = 0.99)
pack_sum
top_unique <- filter(pack_sum, unique > 465)
View(top_unique)
top_unique_sorted <- arrange(top_unique, desc(unique))
View(top_unique_sorted)
submit()
submit()
submit()
View(result3)
submit()
submit()
submit()
reset()
submit()
submit()
swirl()
submit()
submit()
submit()
submit()
submit()
submit()
library(tidyr)
students
?gather
gather(students,sex,count,-grade)
students2
?gather()
students2
gather(students2, sex_class, count, -grade)
res <- gather(students2, sex_class, count, -grade)
res
?seperate()
?separate
separate(data = res, col = sex_class, into = c('sex','class'))
submit()
submit()
submit()
students3
submit()
submit()
?chain
submit()
submit()
submit()
submit()
?gather
submit()
students3
submit()
submit()
submit()
?spread
submit()
submit()
submit()
setwd("C:/Users/Hammad Ali Khan/Desktop/hammad_khi_assignment2")
library(lubridate)
bufferedDataFrame <- read.csv("hospitaldata.csv", strip.white = T, na.strings = c("-",""," ","\t","\n",NA), stringsAsFactors = F)
df <- tbl_df(bufferedDataFrame)
names(df) <- gsub("\\.", "", names(df))
df$Age <- as.numeric(gsub("[^0-9]",'',df$Age))
df$Date <- as.Date(strptime(df$Date, "%a, %B %d, %Y"))
df$Time <- format(strptime(df$Time, format='%I:%M %p'), '%I:%M %p')
df$Sex <- toupper(df$Sex)
df$TotalCharges <- as.numeric(gsub("cancelled", NA, ignore.case = T,df$TotalCharges))
df$Procedure <- (gsub("cancelled", NA, ignore.case = T,df$Procedure))
library(dplyr)
library(lubridate)
library(tidyr)
bufferedDataFrame <- read.csv("hospitaldata.csv", strip.white = T, na.strings = c("-",""," ","\t","\n",NA), stringsAsFactors = F)
df <- tbl_df(bufferedDataFrame)
names(df) <- gsub("\\.", "", names(df))
df$Age <- as.numeric(gsub("[^0-9]",'',df$Age))
df$Date <- as.Date(strptime(df$Date, "%a, %B %d, %Y"))
df$Time <- format(strptime(df$Time, format='%I:%M %p'), '%I:%M %p')
df$Sex <- toupper(df$Sex)
df$TotalCharges <- as.numeric(gsub("cancelled", NA, ignore.case = T,df$TotalCharges))
df$Procedure <- (gsub("cancelled", NA, ignore.case = T,df$Procedure))
df$AmountBalance <- as.numeric(gsub(",",'',df$AmountBalance))
high_time_repeated <- df %>%
filter(!is.na(Time)) %>%
group_by(Time) %>%
tally() %>%
View()
high_time_repeated <- df %>%
filter(!is.na(Time)) %>%
group_by(Time) %>%
tally() %>%
arrange(desc(n))
View(high_time_repeated)
high_time_repeated$Time[high_time_repeated$n == max(high_time_repeated$n)]
